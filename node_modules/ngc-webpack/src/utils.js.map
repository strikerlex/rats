{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;AAKA,iBAAwB,OAAmB,EAAE,IAAgD;IAC3F,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA,OAAO,OAAO,CAAC,CAAC,CAAC,KAAK,UAAU,EAAhC,CAAgC,CAAE,CAAC;IAC3D,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,UAAU,CAAC;IAC7C,CAAC;AACH,CAAC;AAND,0BAMC;AAED,kBAAqD,OAAmB,EACnB,IAAO,EACP,GAAkC;IACrF,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AAC/C,CAAC;AAJD,4BAIC;AAED,sCAA6C,QAAqC;IAChF,MAAM,CAAC,UAAU,CAAC,KAAK,CAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,CAAC,EAAX,CAAW,CAAE,CAAC;AAC9C,CAAC;AAFD,oEAEC;AAED,IAAM,UAAU,GAA8D;IAC5E,UAAC,QAAqC,IAAK,OAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,EAArC,CAAqC;IAChF,UAAC,QAAqC,IAAK,OAAA,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAxB,CAAwB;IACnE,UAAC,QAAqC,IAAK,OAAA,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,eAAe,EAAxC,CAAwC;IACnF,UAAC,QAAqC,IAAK,OAAA,OAAO,QAAQ,CAAC,aAAa,CAAC,eAAe,CAAC,GAAG,KAAK,UAAU,EAAhE,CAAgE;CAC5G,CAAC","sourcesContent":["import { NgcWebpackPluginOptions as NgcOptions } from './plugin-options'\nimport { MonkeyAngularCompilerPlugin } from './monkies';\n\nexport function hasHook(options: NgcOptions, name: Array<keyof NgcOptions>): boolean[];\nexport function hasHook(options: NgcOptions, name: keyof NgcOptions): boolean;\nexport function hasHook(options: NgcOptions, name: keyof NgcOptions | Array<keyof NgcOptions>): boolean | boolean[] {\n  if (Array.isArray(name)) {\n    return name.map( n => typeof options[n] === 'function' );\n  } else {\n    return typeof options[name] === 'function';\n  }\n}\n\nexport function withHook<P extends keyof NgcOptions>(options: NgcOptions,\n                                                     name: P,\n                                                     run: (hook: NgcOptions[P]) => void): void {\n  hasHook(options, name) && run(options[name]);\n}\n\nexport function isValidAngularCompilerPlugin(instance: MonkeyAngularCompilerPlugin): boolean {\n  return validators.every( m => m(instance) );\n}\n\nconst validators: Array<(instance: MonkeyAngularCompilerPlugin) => boolean> = [\n  (instance: MonkeyAngularCompilerPlugin) => Array.isArray(instance._transformers),\n  (instance: MonkeyAngularCompilerPlugin) => !!instance._compilerHost,\n  (instance: MonkeyAngularCompilerPlugin) => !!instance._compilerHost._resourceLoader,\n  (instance: MonkeyAngularCompilerPlugin) => typeof instance._compilerHost._resourceLoader.get === 'function'\n];"]}