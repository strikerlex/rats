"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var webpack_1 = require("@ngtools/webpack");
var utils_1 = require("./utils");
var resource_loader_1 = require("./resource-loader");
var NgcWebpackPlugin = /** @class */ (function () {
    function NgcWebpackPlugin(options) {
        if (options.hasOwnProperty('AOT')) {
            if (!options.hasOwnProperty('skipCodeGeneration')) {
                options.skipCodeGeneration = !options.AOT;
            }
            delete options.AOT;
        }
        this.ngcWebpackPluginOptions = options;
        this.angularCompilerPlugin = new webpack_1.AngularCompilerPlugin(options);
        this.valid = utils_1.isValidAngularCompilerPlugin(this.angularCompilerPlugin);
        if (!this.valid) {
            throw new Error('The "@ngtools/webpack" package installed is not compatible with this ' +
                'version of "ngc-webpack"');
        }
    }
    NgcWebpackPlugin.prototype.apply = function (compiler) {
        if (!this.valid) {
            return;
        }
        var ngcOptions = this.ngcWebpackPluginOptions;
        var ngPlugin = this.angularCompilerPlugin;
        var compilerHost = ngPlugin._compilerHost;
        utils_1.withHook(ngcOptions, 'beforeRun', function (beforeRun) {
            var ran = false;
            var run = function (cmp, next) {
                if (ran) {
                    next();
                    return;
                }
                // for now, run once
                // TODO: add hook for watch mode to notify on watch-run
                ran = true;
                var webpackResourceLoader = new resource_loader_1.WebpackResourceLoader();
                webpackResourceLoader.update(compiler.createCompilation());
                Promise.resolve(beforeRun(webpackResourceLoader)).then(next).catch(next);
            };
            compiler.plugin('run', run);
            compiler.plugin('watch-run', run);
        });
        ngPlugin.apply(compiler);
        if (ngcOptions.tsTransformers) {
            if (ngcOptions.tsTransformers.before) {
                (_a = this.angularCompilerPlugin._transformers).push.apply(_a, ngcOptions.tsTransformers.before);
            }
            if (ngcOptions.tsTransformers.after) {
            }
        }
        if (ngcOptions.readFileTransformer) {
            var orgReadFile_1 = compilerHost.readFile;
            var _b = ngcOptions.readFileTransformer, predicate_1 = _b.predicate, transform_1 = _b.transform;
            var predicateFn_1 = typeof predicate_1 === 'function'
                ? predicate_1
                : function (fileName) { return predicate_1.test(fileName); };
            compilerHost.readFile = function (fileName) {
                if (predicateFn_1(fileName)) {
                    var stats = compilerHost._files[fileName];
                    if (!stats) {
                        var content = transform_1(fileName, orgReadFile_1.call(compilerHost, fileName));
                        stats = compilerHost._files[fileName];
                        if (stats) {
                            stats.content = content;
                        }
                        return content;
                    }
                }
                return orgReadFile_1.call(compilerHost, fileName);
            };
        }
        if (utils_1.hasHook(ngcOptions, ['resourcePathTransformer', 'resourceTransformer']).some(function (v) { return v; })) {
            var resourceGet_1 = compilerHost._resourceLoader.get;
            compilerHost._resourceLoader.get = function (filePath) {
                utils_1.withHook(ngcOptions, 'resourcePathTransformer', function (resourcePath) {
                    filePath = ngcOptions.resourcePathTransformer(filePath);
                });
                var p = resourceGet_1.call(compilerHost._resourceLoader, filePath);
                utils_1.withHook(ngcOptions, 'resourceTransformer', function (resource) {
                    p = p.then(function (content) { return Promise.resolve(resource(filePath, content)); });
                });
                return p;
            };
        }
        var _a;
    };
    return NgcWebpackPlugin;
}());
exports.NgcWebpackPlugin = NgcWebpackPlugin;
//# sourceMappingURL=plugin.js.map